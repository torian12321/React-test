//-- Generic mixins -
//-------------------
@mixin css3-prefix($property, $values...) {
  -webkit-#{$property}: #{$values};  /* Chrome, Safari, Opera */
   -khtml-#{$property}: #{$values};
     -moz-#{$property}: #{$values};  /* Firefox all */
      -ms-#{$property}: #{$values};  /* IE 9 */
       -o-#{$property}: #{$values};
          #{$property}: #{$values};  /* Likely future */
}

@mixin transition (
	$property: all,
	$time    : .5s,
	$timing  : ease-out,
	$delay   : false,
	$merge   : true
	) {
	@if ($delay != false) {
		-webkit-transition-delay: $delay;
		transition-delay        : $delay;
	}
  -webkit-transition: $property $timing $time;
  transition        : $property $timing $time;
}

@mixin border (
	$width: $BWidth,
	$color: $BColor,
	$style: $BStyle
	){
	border: $width $color $style;
}

@mixin rounded ($radius: $BRadious) {
  @include css3-prefix('border-radius', $radius);
}

@mixin opacity($value) {
  @include css3-prefix('opacity', $value);

  // IE8 filter
  $IEValue: $value*100;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
  filter: alpha(opacity=$IEValue);
}

@mixin flex() {
	display: -webkit-box;
	display: -webkit-flex;
	display: -ms-flexbox;
	display: flex;
}

@mixin transform($transformation) {
  @include css3-prefix('transform', $transformation);
}
@mixin transform-origin ($origin: center center) {
  @include css3-prefix('transform-origin', $origin);
}
@mixin transform-style($style: preserve-3d) {
  @include css3-prefix('transform-style', $style);
}

@mixin rotate (
	$angle : 180deg,
	$x-axis: 50%,
	$y-axis: 50%
) {
  @include transform(rotate($angle));
  @include transform-origin($x-axis $y-axis);
}
@mixin scale (
	$value : 1,
	$x-axis: 50%,
	$y-axis: 50%
) {
	@include transform(scale($value));
	@include transform-origin($x-axis, $y-axis);
}


@mixin shadow ($shadows...) {
  @if($shadows = "") {
    $shadows: $shadow;
  }
  @include css3-prefix('box-shadow', $shadows);
}

// https://stackoverflow.com/questions/17181849/placeholder-mixin-scss-css
@mixin placeholder() {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}
}

@mixin oneLineText(){
	text-overflow: ellipsis;
	overflow     : hidden;
	white-space  : nowrap;

  &.pinned {
    white-space: initial !important;
  }
}

@mixin userSelect($select: text){
  // text | none | all
  @include css3-prefix('user-select', $select);
}
// ------------------
// --   Filters    --
// ------------------
@mixin filter($filter...) {
  @include css3-prefix('filter', $filter);
}

@mixin blur ($blur: 5px) {
  @include filter(blur($blur));
}
@mixin BW ($grayScale: 50%) {
  @include filter(grayscale($grayScale));
}


// ------------------
// --  Background  --
// ------------------
@mixin gradient(
  $startColor: $themeColor_1,
  $endColor  : lighten($startColor, 10%),
  $angle     : 90deg
) {
  background-color: $startColor;
  background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
  background-image: -webkit-linear-gradient($angle, $startColor, $endColor);
  background-image:    -moz-linear-gradient($angle, $startColor, $endColor);
  background-image:     -ms-linear-gradient($angle, $startColor, $endColor);
  background-image:      -o-linear-gradient($angle, $startColor, $endColor);
  background-image:         linear-gradient($angle, $startColor, $endColor);
}

@mixin background-img (
	$BG-url  : '@{defImgDir}/img.png',
	$position: center center,
	$size    : cover,
	$repeat  : no-repeat
) {
	background             : url($BG-url) $repeat $position;

	background-size        : $size;
	-moz-background-size   : $size;
	-webkit-background-size: $size;
}
@mixin background-parallax (
  $BG-url  : '@{defImgDir}/img.png',
  $position: center center
) {
  background: url($BG-url) $position no-repeat fixed;
  @include background-cover();
}
@mixin background-cover (
  $position: center center,
  $repeat  : no-repeat
) {
  background-position    : $position;
  background-repeat      : $repeat;
  background-size        : cover;
  -moz-background-size   : cover;
  -webkit-background-size: cover;
}

// ------------------
// --  Animations  --
// ------------------

@mixin animation (
	$animation,
	$time      : 1s,
	$iterations: infinite,
	$speedCurve: linear,
	$delay     : false,
	$direction : false,
	$state     : false
) {
	@if ($delay) {
    @include animation_delay($delay);
	}
	@if ($direction) {
		@include animation_direction($direction);
	}
	@if ($state) {
		@include animation_state($state);
  }
  @include css3-prefix('animation', $animation $time $speedCurve $iterations);
		// animation        : $animation @time @speedCurve @iterations;
		// -moz-animation   : @animation @time @speedCurve @iterations;
		// -webkit-animation: @animation @time @speedCurve @iterations;
		// -ms-animation    : @animation @time @speedCurve @iterations;
		// -o-animation     : @animation @time @speedCurve @iterations;
}
@mixin animation_delay($delay: 0){
	-webkit-animation-delay: $delay;
    animation-delay      : $delay;
}
@mixin animation_direction($dir: normal){
	// normal | reverse | alternate | alternate-reverse | initial | inherit
	-webkit-animation-direction: $dir;
    animation-direction      : $dir;
}
@mixin animation_state($state: normal){
	// paused | running | initial | inherit
	-webkit-animation-play-state: $state;
    animation-play-state      : $state;
}
@mixin animation_keyframes($animation-name) {
  @-webkit-keyframes  #{$animation-name} { @content; }
  @-moz-keyframes     #{$animation-name} { @content; }
  @-ms-keyframes      #{$animation-name} { @content; }
  @-o-keyframes       #{$animation-name} { @content; }
  @keyframes          #{$animation-name} { @content; }
}

// ------------------
// -- Smart Colors --
// ------------------
@function smartColor (
  $color     : $themeColor_BG,
  $colorLight: $white,
	$colorDark : $black
) {
  @if (lightness( $color ) > 50) {
    @return $colorDark;
  } @else {
    @return $colorLight;
  }
}

@mixin smart-text-color (
  $BG        : $themeColor_BG,
	$colorLight: $fontColor_white,
  $colorDark : $fontColor_black
) {
  color: smartColor($BG, $colorLight, $colorDark);    
}

@mixin smart-bg-color (
  $BG        : $themeColor_BG,
	$colorLight: $white,
  $colorDark : $black2
) {
  background: smartColor($BG, $colorLight, $colorDark);    
}

@mixin smart-fill-color (
  $BG        : $themeColor_BG,
	$colorLight: $white,
  $colorDark : $black2
) {
  fill: smartColor($BG, $colorLight, $colorDark);    
}